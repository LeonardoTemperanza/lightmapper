#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct type_Uniforms
{
    uint2 input_size;
    uint2 output_size;
};

kernel void main0(constant type_Uniforms& Uniforms [[buffer(0)]], texture2d<float> input_tex [[texture(0)]], texture2d<float, access::write> output_tex [[texture(1)]], uint3 gl_WorkGroupID [[threadgroup_position_in_grid]], uint3 gl_LocalInvocationID [[thread_position_in_threadgroup]])
{
    threadgroup spvUnsafeArray<float4, 64> shared_mem;
    uint2 _53 = (Uniforms.input_size / Uniforms.output_size) / uint2(2u);
    uint _59 = (gl_LocalInvocationID.y * 8u) + gl_LocalInvocationID.x;
    uint2 _64 = ((_53 * gl_WorkGroupID.xy) + gl_LocalInvocationID.xy) * uint2(2u);
    float4 _80;
    if (all(gl_LocalInvocationID.xy < _53))
    {
        _80 = ((input_tex.read(uint2(_64), 0u) + input_tex.read(uint2((_64 + uint2(1u, 0u))), 0u)) + input_tex.read(uint2((_64 + uint2(0u, 1u))), 0u)) + input_tex.read(uint2((_64 + uint2(1u))), 0u);
    }
    else
    {
        _80 = float4(0.0);
    }
    shared_mem[_59] = _80;
    threadgroup_barrier(mem_flags::mem_threadgroup);
    for (uint _83 = 32u; _83 > 0u; _83 = _83 >> 1u)
    {
        if (_59 < _83)
        {
            shared_mem[_59] += shared_mem[_59 + _83];
        }
        threadgroup_barrier(mem_flags::mem_threadgroup);
    }
    if (_59 == 0u)
    {
        output_tex.write(shared_mem[0], uint2(gl_WorkGroupID.xy));
    }
}

